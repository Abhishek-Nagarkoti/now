{"name":"Now","tagline":"Now is a time toolkit for golang","body":"## Now\r\n\r\nNow is a time toolkit for golang\r\n\r\n#### Why the project named `Now`?\r\n\r\n```go\r\nnow.BeginningOfDay()\r\n```\r\n`now` is quite readable, aha?\r\n\r\n#### But `now` is so common I can't search the project with my favorite search engine\r\n\r\n* Star it in github [https://github.com/jinzhu/now](https://github.com/jinzhu/now)\r\n* Search it with [http://godoc.org](http://godoc.org)\r\n\r\n### Usage\r\n\r\n```go\r\nimport \"github.com/jinzhu/now\"\r\n\r\ntime.Now() // 2013-11-18 17:51:49.123456789 Mon\r\n\r\nnow.BeginningOfMinute()   // 2013-11-18 17:51:00 Mon\r\nnow.BeginningOfHour()     // 2013-11-18 17:00:00 Mon\r\nnow.BeginningOfDay()      // 2013-11-18 00:00:00 Mon\r\nnow.BeginningOfWeek()     // 2013-11-17 00:00:00 Sun\r\nnow.FirstDayMonday = true // Set Monday as first day, default is Sunday\r\nnow.BeginningOfWeek()     // 2013-11-18 00:00:00 Mon\r\nnow.BeginningOfMonth()    // 2013-11-01 00:00:00 Fri\r\nnow.BeginningOfQuarter()  // 2013-10-01 00:00:00 Tue\r\nnow.BeginningOfYear()     // 2013-01-01 00:00:00 Tue\r\n\r\nnow.EndOfMinute()         // 2013-11-18 17:51:59.999999999 Mon\r\nnow.EndOfHour()           // 2013-11-18 17:59:59.999999999 Mon\r\nnow.EndOfDay()            // 2013-11-18 23:59:59.999999999 Mon\r\nnow.EndOfWeek()           // 2013-11-23 23:59:59.999999999 Sat\r\nnow.FirstDayMonday = true // Set Monday as first day, default is Sunday\r\nnow.EndOfWeek()           // 2013-11-24 23:59:59.999999999 Sun\r\nnow.EndOfMonth()          // 2013-11-30 23:59:59.999999999 Sat\r\nnow.EndOfQuarter()        // 2013-12-31 23:59:59.999999999 Tue\r\nnow.EndOfYear()           // 2013-12-31 23:59:59.999999999 Tue\r\n\r\n\r\n// Use another time\r\nt := time.Date(2013, 02, 18, 17, 51, 49, 123456789, time.Now().Location())\r\nnow.New(t).EndOfMonth()   // 2013-02-28 23:59:59.999999999 Thu\r\n\r\n\r\n// Don't want be bothered with the First Day setting, Use Monday, Sunday\r\nnow.Monday()              // 2013-11-18 00:00:00 Mon\r\nnow.Sunday()              // 2013-11-24 00:00:00 Sun (Next Sunday)\r\nnow.EndOfSunday()         // 2013-11-24 23:59:59.999999999 Sun (End of next Sunday)\r\n\r\nt := time.Date(2013, 11, 24, 17, 51, 49, 123456789, time.Now().Location()) // 2013-11-24 17:51:49.123456789 Sun\r\nnow.New(t).Monday()       // 2013-11-18 00:00:00 Sun (Last Monday if today is Sunday)\r\nnow.New(t).Sunday()       // 2013-11-24 00:00:00 Sun (Beginning Of Today if today is Sunday)\r\nnow.New(t).EndOfSunday()  // 2013-11-24 23:59:59.999999999 Sun (End of Today if today is Sunday)\r\n```\r\n\r\n#### Parse String\r\n\r\n```go\r\ntime.Now() // 2013-11-18 17:51:49.123456789 Mon\r\n\r\n// Parse(string) (time.Time, error)\r\nt, err := now.Parse(\"12:20\")            // 2013-11-18 12:20:00, nil\r\nt, err := now.Parse(\"1999-12-12 12:20\") // 1999-12-12 12:20:00, nil\r\nt, err := now.Parse(\"99:99\")            // 2013-11-18 12:20:00, Can't parse string as time: 99:99\r\n\r\n// MustParse(string) time.Time\r\nnow.MustParse(\"2013-01-13\")             // 2013-01-13 00:00:00\r\nnow.MustParse(\"02-17\")                  // 2013-02-17 00:00:00\r\nnow.MustParse(\"2-17\")                   // 2013-02-17 00:00:00\r\nnow.MustParse(\"8\")                      // 2013-11-18 08:00:00\r\nnow.MustParse(\"2002-10-12 22:14\")       // 2002-10-12 22:14:00\r\nnow.MustParse(\"99:99\")                  // panic: Can't parse string as time: 99:99\r\n```\r\n\r\nExtend `now` to support more formats is quite easy, just update `TimeFormats` variable with `time.Format` like time layout\r\n\r\n```go\r\nnow.TimeFormats = append(now.TimeFormats, \"02 Jan 2006 15:04\")\r\n```\r\n\r\nPlease send me pull requests if you want a format to be supported officially\r\n\r\n# Author\r\n\r\n**jinzhu**\r\n\r\n* <http://github.com/jinzhu>\r\n* <wosmvp@gmail.com>\r\n* <http://twitter.com/zhangjinzhu>\r\n\r\n## License\r\n\r\nReleased under the [MIT License](http://www.opensource.org/licenses/MIT).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}